int minTime(vector<pair<int, int>> &dependency, int duration[], int n, int m) 
    {
        // 	Write your code here
        int indeg[n]={0};
        vector<int> topo, dp(n, 0), adj[n];
        
        for(int i=0;i<dependency.size();i++)
        {
            indeg[dependency[i].second]++ ;
            adj[dependency[i].first].push_back(dependency[i].second);
        }
        
        queue<int> q;
        for(int i=0;i<n;i++)
        {
            if (indeg[i] == 0)
                q.push(i) , dp[i] = duration[i];
        }
        
        while(q.size()>0)
        {
            auto x = q.front(); q.pop();
		    topo.push_back(x);
		    for (auto v : adj[x]) 
		    {
			    dp[v] = max(dp[v], duration[v] + dp[x]);
			    if (--indeg[v]==0)
			        q.push(v);
		    }
        }
        if (topo.size() != n)return -1; // contains cycle !!!
	    return *max_element(dp.begin(), dp.end());
        
        
    }
